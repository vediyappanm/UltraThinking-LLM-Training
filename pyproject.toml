[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ultrathink-llm-training"
version = "1.0.0"
description = "ULTRATHINK: Advanced LLM Training Framework with MoE and Dynamic Reasoning"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "ULTRATHINK Team", email = "team@ultrathink.ai"}
]
keywords = ["ai", "machine-learning", "transformers", "llm", "training", "pytorch", "moe", "reasoning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    "accelerate>=0.24.0",
    "einops>=0.7.0",
    "mlflow>=2.12.0",
    "tensorboard>=2.14.0",
    "tqdm>=4.66.0",
    "rich>=13.5.0",
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    "pyyaml>=6.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.0.0",
    "pylint>=2.17.0",
    "flake8>=7.3.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
]
multimodal = [
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "Pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "librosa>=0.10.0",
]
web = [
    "fastapi>=0.103.0",
    "uvicorn>=0.23.0",
    "gradio>=3.45.0",
    "streamlit>=1.27.0",
]
all = [
    "ultrathink-llm-training[dev,multimodal,web]",
]

[project.urls]
Homepage = "https://github.com/vediyappanm/UltraThinking-LLM-Training"
Documentation = "https://github.com/vediyappanm/UltraThinking-LLM-Training#readme"
Repository = "https://github.com/vediyappanm/UltraThinking-LLM-Training"
"Bug Reports" = "https://github.com/vediyappanm/UltraThinking-LLM-Training/issues"
Changelog = "https://github.com/vediyappanm/UltraThinking-LLM-Training/blob/main/CHANGELOG.md"

[project.scripts]
ultrathink-train = "train_ultrathink:main"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["src", "src.models", "src.training", "src.data", "src.evaluation", "src.monitoring", "src.security"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = ["tests/", "build/", "dist/"]

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests requiring GPU",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]
